use schema ETL.landing_zone;

CREATE or replace storage integration my_aws_integration
  TYPE = EXTERNAL_STAGE
  ENABLED = TRUE
  STORAGE_PROVIDER = S3
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::641308323364:role/my_first'
  STORAGE_ALLOWED_LOCATIONS = ('s3://first-etl/customers/', 's3://first-etl/items/', 's3://first-etl/orders/')
  COMMENT="This is aws integration";

desc integration my_aws_integration;

 -- order stage
create or replace stage delta_orders_s3
        url = 's3://first-etl/orders/' 
        storage_integration = my_aws_integration
        comment = 'feed delta order files';
    -- item stage
create or replace stage delta_items_s3
        url = 's3://first-etl/items/' 
        storage_integration = my_aws_integration
        comment = 'feed delta item files';

    -- customer stage
create or replace stage delta_customer_s3
        url = 's3://first-etl/customers/' 
        storage_integration = my_aws_integration
        comment = 'feed delta customer files';
        
show stages;

list @delta_customer_s3;
list @delta_items_s3;
list @delta_orders_s3;

create or replace pipe order_pipe
    auto_ingest = true
    as 
        copy into landing_order from @delta_orders_s3
        file_format = (type=csv COMPRESSION=none)
        pattern='.*order.*[.]csv'
        ON_ERROR = 'CONTINUE';

create or replace pipe item_pipe
        auto_ingest = true
     as 
        copy into landing_item from @delta_items_s3
        file_format = (type=csv COMPRESSION=none)
        pattern='.*item.*[.]csv'
        ON_ERROR = 'CONTINUE';

create or replace pipe customer_pipe
        auto_ingest = true
    as 
        copy into landing_customer from @delta_customer_s3
        file_format = (type=csv COMPRESSION=none)
        pattern='.*customer.*[.]csv'
        ON_ERROR = 'CONTINUE';


show pipes;

 
select system$pipe_status('order_pipe');
select system$pipe_status('item_pipe');
select system$pipe_status('customer_pipe');


